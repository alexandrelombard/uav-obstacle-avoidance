/** 
 * 
 */
package io.sarl.airsim.behaviors.avoidance

import io.sarl.airsim.communication.NotifyPose
import io.sarl.core.Logging
import io.sarl.airsim.communication.NotifyKinematics
import io.sarl.airsim.perceptions.sim.SimPosePerception
import io.sarl.core.DefaultContextInteractions
import io.sarl.airsim.perceptions.sim.SimGroundTruthKinematicsPerception
import io.sarl.core.Initialize
import io.sarl.airsim.influences.Takeoff
import io.sarl.core.Schedules
import io.sarl.airsim.influences.MoveByVelocity
import java.util.concurrent.ConcurrentHashMap
import io.sarl.lang.core.Address
import io.sarl.airsim.behaviors.target.ExternalDroneState
import fr.utbm.airsim.api.Pose
import fr.utbm.airsim.api.KinematicsState
import io.sarl.airsim.math.Vector3
import fr.utbm.airsim.api.Vector3r

/** 
 * @author Alexandre Lombard
 * 
 */
behavior ObstacleAvoidanceDroneBehavior {
	uses Logging, DefaultContextInteractions, Schedules
	
	private val periodMs = 500 // The period of decision of the drone
	private val neighbours = new ConcurrentHashMap<Address, ExternalDroneState>

	private var target : Vector3 = null
	
	private var currentPose : Pose = null
	private var currentKinematicsState : KinematicsState = null

	on Initialize {
		info("Drone agent is starting...")

		// Note: before the takeoff, the drone is not affected
		emit(new Takeoff)

		in(2000) [					// Start is delayed
			every(periodMs) [			// Then a decision is taken at every "periodMs"
				// TODO Compute the desired velocity for the drone: 
				emit(new MoveByVelocity(0.0f, 0.0f, 0.0f, periodMs / 1000.0f))
			]
		]
	}
	

	// Event received when the drone is receiving its own position
	on SimPosePerception {
		synchronized(this) {
			this.currentPose = occurrence.pose
		}
		
		// TODO Manage the position
		
		// We can emit our position to the other drones so they would be able to know where we are:
		emit(new NotifyPose(occurrence.pose))
	}
	
	on SimGroundTruthKinematicsPerception {
		synchronized (this) {
			this.currentKinematicsState = occurrence.state
		}
		
		// TODO Manage the kinematics state
		
		// We can emit our kinematics state to the other drones so they would be able to know where we go:
		emit(new NotifyKinematics(occurrence.state))
	}

	// Event received when another drone is communicating its position
	on NotifyPose [!isMe(occurrence.source)] {
		val source = occurrence.source
		val position = occurrence.pose.position
		val orientation = occurrence.pose.orientation

		if (this.neighbours.containsKey(source)) {
			this.neighbours.put(source,
				new ExternalDroneState(this.neighbours.get(source), occurrence.pose))
		} else {
			this.neighbours.put(source, new ExternalDroneState(occurrence.pose, null))
		}
		
		// TODO Manage the other drone position
	}

	// Event received when another drone is communicating its speed
	on NotifyKinematics [!isMe(occurrence.source)] {
		val source = occurrence.source
		val linearVelocity= occurrence.state.linearVelocity
		val angularVelocity = occurrence.state.angularVelocity

		if (this.neighbours.containsKey(source)) {
			this.neighbours.put(source,
				new ExternalDroneState(this.neighbours.get(source), occurrence.state))
		} else {
			val nullPose : Pose = null
			this.neighbours.put(source, new ExternalDroneState(nullPose, occurrence.state))
		}

		// TODO Manage the other drone kinematics state
	}
	
	def computePotentialField() {
		var f = new Vector3()
		
		synchronized (this) {
			this.neighbours.values.forEach [ s |
				val p0_ = this.currentPose.position
				val eta_ij = 1.0
				val p_ij = s.pose.position.minus(this.currentPose.position)
				val norm_p_ij = p_ij.length()
				
				val p_ig = this.currentPose.position.minus(this.target.toVector3r)
			]
		}
		
		return f
	}
	
	def toVector3r(v: Vector3) {
		return new Vector3r(v.x, v.y, v.z)
	}
	
}
