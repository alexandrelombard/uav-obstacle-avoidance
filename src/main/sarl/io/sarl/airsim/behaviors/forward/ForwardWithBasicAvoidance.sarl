/** 
 * 
 */
package io.sarl.airsim.behaviors.forward

import fr.utbm.airsim.api.Pose
import io.sarl.airsim.influences.MoveByVelocity
import io.sarl.airsim.influences.Takeoff
import io.sarl.airsim.math.Vector2
import io.sarl.airsim.perceptions.LidarDataPerception
import io.sarl.airsim.perceptions.sim.SimPosePerception
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.ArrayList
import java.util.List

/** 
 * Make a drone agent goes forward with a basic obstacle avoidance behavior
 * @author Alexandre Lombard
 * 
 */
behavior ForwardWithBasicAvoidance {
	uses Logging, DefaultContextInteractions, Schedules
	

	var initialPose: Pose = null
	var targetDir: Float = 0.0f
	var direction : Float = 0.0f

	/**
	 * The following strategy is initialized: the drone take-off, and after a given amount of time, it moves in
	 * a direction, the direction is computed every time a perception is received
	 */
	on Initialize {
		info("Drone agent starting...")

		emit(new Takeoff)

		// Note: X is forward
		in(3000) [
			every(1000) [
				val dir = synchronized(this.direction) { this.direction }
				emit(new MoveByVelocity(
					Math.cos(dir).floatValue,
					Math.sin(dir).floatValue,
					0.0f,
					1.0f
				))
			]
		]
	}

	on Destroy {
		//
	}
	
	/**
	 * On Lidar perceptions, a repulsion force can be computed, it will be used to define a new direction 
	 */
	on LidarDataPerception {
		val lidarData = occurrence.lidarData
		val pointCloud = lidarData.pointCloud

		val repulsionForces : List<Vector2> = new ArrayList<Vector2>(pointCloud.length)

		// The lidar is supposed to have 1 channel and to get 360 points per second
		// We compute a repulsion force per point
		for (var idx = 0; idx < pointCloud.length; idx += 3) {
			// We ignore points which are not on the drone plane
			if (Math.abs(pointCloud.get(idx + 2)) < 0.25) {
				val dirVector = new Vector2(pointCloud.get(idx), pointCloud.get(idx + 1))
				// We ignore points which are not in front of the drone
				if (Math.abs(dirVector.toAngle()) < Math.PI.floatValue / 4f)
					repulsionForces.add(dirVector * (-1.0f / Math.pow(dirVector.norm, 2)).floatValue)
			}
		}

		val resultingForce = repulsionForces.reduce[p1, p2|p1 + p2]

		synchronized(this.direction) {
			this.direction = if(resultingForce === null) this.targetDir else resultingForce.toAngle + Math.PI.floatValue / 2f
		}
	}
	
	/**
	 * On pose perception, the internal state of the drone is updated
	 */
	on SimPosePerception {
		synchronized (this.direction) {
			if (initialPose === null) {
				this.initialPose = occurrence.pose
				this.targetDir = this.initialPose.orientation.toEuleurAngles.z
				this.direction = this.targetDir
			}	
		}
	}
}
